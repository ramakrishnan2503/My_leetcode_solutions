class Solution:
    def regionsBySlashes(self, grid: List[str]) -> int:
        n = len(grid)
        _grid = [[0 for _ in range(n * 2)] for _ in range(n * 2)]

        for i in range(n):
            for j in range(n):
                if grid[i][j] == '/':
                    _grid[2 * i][2 * j + 1] = _grid[2 * i + 1][2 * j] = 1
                elif grid[i][j] == '\\':
                    _grid[2 * i][2 * j] = _grid[2 * i + 1][2 * j + 1] = 1

        ans = 0
        for i in range(2 * n):
            for j in range(2 * n):
                if _grid[i][j] == 0:
                    stack = [(i, j)]
                    while stack:
                        ii, jj = stack.pop()
                        _grid[ii][jj] = 1

                        if (ii % 2) ^ (jj % 2) == 1:
                            neighbours = [(ii - 1, jj), (ii + 1, jj), (ii, jj - 1), (ii, jj + 1), (ii - 1, jj - 1), (ii + 1, jj + 1)]
                        else:
                            neighbours = [(ii - 1, jj), (ii + 1, jj), (ii, jj - 1), (ii, jj + 1), (ii + 1, jj - 1), (ii - 1, jj + 1)]
                            
                        for iii, jjj in neighbours:
                            if 0 <= iii < 2 * n and 0 <= jjj < 2 * n and _grid[iii][jjj] == 0:
                                stack.append((iii, jjj))
                    ans += 1
        
        return ans


